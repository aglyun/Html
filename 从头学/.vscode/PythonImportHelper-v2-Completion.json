[
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "render_template",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "make_response",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "session",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "render_template",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "g",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Blueprint",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "render_template",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Blueprint",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "render_template",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Blueprint",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "render_template",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Blueprint",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Blueprint",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "render_template",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "generate_lorem_ipsum",
        "importPath": "jinja2.utils",
        "description": "jinja2.utils",
        "isExtraImport": true,
        "detail": "jinja2.utils",
        "documentation": {}
    },
    {
        "label": "SocketIO",
        "importPath": "flask_socketio",
        "description": "flask_socketio",
        "isExtraImport": true,
        "detail": "flask_socketio",
        "documentation": {}
    },
    {
        "label": "create_app",
        "importPath": "app",
        "description": "app",
        "isExtraImport": true,
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "create_app",
        "importPath": "app",
        "description": "app",
        "isExtraImport": true,
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "create_app",
        "importPath": "app",
        "description": "app",
        "isExtraImport": true,
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "db",
        "importPath": "models",
        "description": "models",
        "isExtraImport": true,
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "Demo",
        "importPath": "models",
        "description": "models",
        "isExtraImport": true,
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "SQLAlchemy",
        "importPath": "flask_sqlalchemy",
        "description": "flask_sqlalchemy",
        "isExtraImport": true,
        "detail": "flask_sqlalchemy",
        "documentation": {}
    },
    {
        "label": "click",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "click",
        "description": "click",
        "detail": "click",
        "documentation": {}
    },
    {
        "label": "show_post",
        "kind": 2,
        "importPath": "ajax异步请求.app",
        "description": "ajax异步请求.app",
        "peekOfCode": "def show_post():\n    # 虚拟文章生成,n=2代表生成2个虚拟文章\n    p = generate_lorem_ipsum(n=2)\n    return p \n@app.route('/')\ndef index():\n    return render_template(\"post.html\")\nif __name__ == \"__main__\":\n    app.run(host=\"0.0.0.0\", port=5000)",
        "detail": "ajax异步请求.app",
        "documentation": {}
    },
    {
        "label": "index",
        "kind": 2,
        "importPath": "ajax异步请求.app",
        "description": "ajax异步请求.app",
        "peekOfCode": "def index():\n    return render_template(\"post.html\")\nif __name__ == \"__main__\":\n    app.run(host=\"0.0.0.0\", port=5000)",
        "detail": "ajax异步请求.app",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "ajax异步请求.app",
        "description": "ajax异步请求.app",
        "peekOfCode": "app = Flask(__name__)\n@app.route(\"/post\")\ndef show_post():\n    # 虚拟文章生成,n=2代表生成2个虚拟文章\n    p = generate_lorem_ipsum(n=2)\n    return p \n@app.route('/')\ndef index():\n    return render_template(\"post.html\")\nif __name__ == \"__main__\":",
        "detail": "ajax异步请求.app",
        "documentation": {}
    },
    {
        "label": "set_cookie",
        "kind": 2,
        "importPath": "cookie.app",
        "description": "cookie.app",
        "peekOfCode": "def set_cookie(name):\n    \"\"\" 必须通过响应后才能设置cookie\"\"\"\n    response = make_response(\"设置成功\")\n    print(name)\n    response.set_cookie('name', \"我不知道\", max_age=3600)\n    return response\n# 获取cookie\n@app.route(\"/key\")\ndef key():\n    k = request.cookies.get('name', '没有cookie')",
        "detail": "cookie.app",
        "documentation": {}
    },
    {
        "label": "key",
        "kind": 2,
        "importPath": "cookie.app",
        "description": "cookie.app",
        "peekOfCode": "def key():\n    k = request.cookies.get('name', '没有cookie')\n    print('保存的cookie值是：',k)\n    return k\nif __name__ == \"__main__\":\n    app.run(host=\"0.0.0.0\", port=5000)",
        "detail": "cookie.app",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "cookie.app",
        "description": "cookie.app",
        "peekOfCode": "app = Flask(__name__)\n# 设置cookie\n@app.route(\"/<name>\")\ndef set_cookie(name):\n    \"\"\" 必须通过响应后才能设置cookie\"\"\"\n    response = make_response(\"设置成功\")\n    print(name)\n    response.set_cookie('name', \"我不知道\", max_age=3600)\n    return response\n# 获取cookie",
        "detail": "cookie.app",
        "documentation": {}
    },
    {
        "label": "login",
        "kind": 2,
        "importPath": "session.app",
        "description": "session.app",
        "peekOfCode": "def login():\n    session['user'] = \"ABCbsadda\"\n    session.permanent = True   # 保存永久有效\n    return \"登录成功\"\n@app.route(\"/ls\")\ndef ls():\n    # 查看session设置的值\n    u = session['user'] \n    print(u)\n    return \"欢迎您{}\".format(u)",
        "detail": "session.app",
        "documentation": {}
    },
    {
        "label": "ls",
        "kind": 2,
        "importPath": "session.app",
        "description": "session.app",
        "peekOfCode": "def ls():\n    # 查看session设置的值\n    u = session['user'] \n    print(u)\n    return \"欢迎您{}\".format(u)\n@app.route('/logout')\ndef logout():\n    session.clear()\n    return \"退出成功\"\nif __name__ == \"__main__\":",
        "detail": "session.app",
        "documentation": {}
    },
    {
        "label": "logout",
        "kind": 2,
        "importPath": "session.app",
        "description": "session.app",
        "peekOfCode": "def logout():\n    session.clear()\n    return \"退出成功\"\nif __name__ == \"__main__\":\n    app.run(host=\"0.0.0.0\", port=5000)",
        "detail": "session.app",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "session.app",
        "description": "session.app",
        "peekOfCode": "app = Flask(__name__)\n# session的秘钥\napp.secret_key = \"fgjghguyfyuvvvhjbhjd6788\"\n@app.route('/')\ndef login():\n    session['user'] = \"ABCbsadda\"\n    session.permanent = True   # 保存永久有效\n    return \"登录成功\"\n@app.route(\"/ls\")\ndef ls():",
        "detail": "session.app",
        "documentation": {}
    },
    {
        "label": "app.secret_key",
        "kind": 5,
        "importPath": "session.app",
        "description": "session.app",
        "peekOfCode": "app.secret_key = \"fgjghguyfyuvvvhjbhjd6788\"\n@app.route('/')\ndef login():\n    session['user'] = \"ABCbsadda\"\n    session.permanent = True   # 保存永久有效\n    return \"登录成功\"\n@app.route(\"/ls\")\ndef ls():\n    # 查看session设置的值\n    u = session['user'] ",
        "detail": "session.app",
        "documentation": {}
    },
    {
        "label": "index",
        "kind": 2,
        "importPath": "socketio聊天.app",
        "description": "socketio聊天.app",
        "peekOfCode": "def index():\n    return render_template(\"index.html\")\n# 房间的名字\nr = \"abc\"    # 房间名\np = \"/ceshi\" # 地址名\n# 客户端连接成功后\n@socket.on(\"connect\", namespace=p)\ndef connect():\n    sid = request.sid\n    print(sid, \"上线了\")",
        "detail": "socketio聊天.app",
        "documentation": {}
    },
    {
        "label": "connect",
        "kind": 2,
        "importPath": "socketio聊天.app",
        "description": "socketio聊天.app",
        "peekOfCode": "def connect():\n    sid = request.sid\n    print(sid, \"上线了\")\n    socket.emit(r, sid+\"上线了\", namespace=p)\n# 客户端断开连接后\n@socket.on(\"disconnect\", namespace=p)\ndef disconnect():\n    sid = request.sid\n    print(sid, \"退出房间\")\n# 接受/发送消息的函数,ceshi是接口，可以随意命名",
        "detail": "socketio聊天.app",
        "documentation": {}
    },
    {
        "label": "disconnect",
        "kind": 2,
        "importPath": "socketio聊天.app",
        "description": "socketio聊天.app",
        "peekOfCode": "def disconnect():\n    sid = request.sid\n    print(sid, \"退出房间\")\n# 接受/发送消息的函数,ceshi是接口，可以随意命名\n@socket.on(r, namespace=p)\ndef cehsi(msg):\n    # msg得到前端发来的数据\n    sid = request.sid\n    msg = \"{}: {}\".format(sid,msg)   # 把消息拼接好\n    # 往ceshi的接口发送消息",
        "detail": "socketio聊天.app",
        "documentation": {}
    },
    {
        "label": "cehsi",
        "kind": 2,
        "importPath": "socketio聊天.app",
        "description": "socketio聊天.app",
        "peekOfCode": "def cehsi(msg):\n    # msg得到前端发来的数据\n    sid = request.sid\n    msg = \"{}: {}\".format(sid,msg)   # 把消息拼接好\n    # 往ceshi的接口发送消息\n    socket.emit(r, msg, namespace=p)\nif __name__ == \"__main__\":\n    socket.run(app, host=\"0.0.0.0\", port=5000, debug=True)",
        "detail": "socketio聊天.app",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "socketio聊天.app",
        "description": "socketio聊天.app",
        "peekOfCode": "app = Flask(__name__)\napp.config[\"SECRET_KEY\"] = \"jdsklf\"   # 秘钥\nsocket = SocketIO(app)\nsocket.init_app(app, cors_allowed_origins=\"*\")\n\"\"\"\n注意：\n    Flask-SocketIO      5.3.1\n    gevent-websocket    0.10.1\n    gevent              21.12.0\n前端：  ",
        "detail": "socketio聊天.app",
        "documentation": {}
    },
    {
        "label": "app.config[\"SECRET_KEY\"]",
        "kind": 5,
        "importPath": "socketio聊天.app",
        "description": "socketio聊天.app",
        "peekOfCode": "app.config[\"SECRET_KEY\"] = \"jdsklf\"   # 秘钥\nsocket = SocketIO(app)\nsocket.init_app(app, cors_allowed_origins=\"*\")\n\"\"\"\n注意：\n    Flask-SocketIO      5.3.1\n    gevent-websocket    0.10.1\n    gevent              21.12.0\n前端：  \n    jquery.min.js       3.1.1     ",
        "detail": "socketio聊天.app",
        "documentation": {}
    },
    {
        "label": "socket",
        "kind": 5,
        "importPath": "socketio聊天.app",
        "description": "socketio聊天.app",
        "peekOfCode": "socket = SocketIO(app)\nsocket.init_app(app, cors_allowed_origins=\"*\")\n\"\"\"\n注意：\n    Flask-SocketIO      5.3.1\n    gevent-websocket    0.10.1\n    gevent              21.12.0\n前端：  \n    jquery.min.js       3.1.1     \n    socket.io.js        4.5.3      ",
        "detail": "socketio聊天.app",
        "documentation": {}
    },
    {
        "label": "r",
        "kind": 5,
        "importPath": "socketio聊天.app",
        "description": "socketio聊天.app",
        "peekOfCode": "r = \"abc\"    # 房间名\np = \"/ceshi\" # 地址名\n# 客户端连接成功后\n@socket.on(\"connect\", namespace=p)\ndef connect():\n    sid = request.sid\n    print(sid, \"上线了\")\n    socket.emit(r, sid+\"上线了\", namespace=p)\n# 客户端断开连接后\n@socket.on(\"disconnect\", namespace=p)",
        "detail": "socketio聊天.app",
        "documentation": {}
    },
    {
        "label": "p",
        "kind": 5,
        "importPath": "socketio聊天.app",
        "description": "socketio聊天.app",
        "peekOfCode": "p = \"/ceshi\" # 地址名\n# 客户端连接成功后\n@socket.on(\"connect\", namespace=p)\ndef connect():\n    sid = request.sid\n    print(sid, \"上线了\")\n    socket.emit(r, sid+\"上线了\", namespace=p)\n# 客户端断开连接后\n@socket.on(\"disconnect\", namespace=p)\ndef disconnect():",
        "detail": "socketio聊天.app",
        "documentation": {}
    },
    {
        "label": "ceshi",
        "kind": 2,
        "importPath": "上下文.app",
        "description": "上下文.app",
        "peekOfCode": "def ceshi():\n    return dict(db=\"测试数据库\",user=\"admin\")\n# 请求狗子\n# before_first_requet\n@app.before_first_request\ndef first():\n    print(\"我只会执行一次\")\n@app.before_request\ndef chongfu():\n    # 无论怎么请求，这里都会被预先触发",
        "detail": "上下文.app",
        "documentation": {}
    },
    {
        "label": "first",
        "kind": 2,
        "importPath": "上下文.app",
        "description": "上下文.app",
        "peekOfCode": "def first():\n    print(\"我只会执行一次\")\n@app.before_request\ndef chongfu():\n    # 无论怎么请求，这里都会被预先触发\n    # g对象可以把当前请求需要的全局变量存储\n    # g.name 是任意属性，也可以写g.xxx g.abc g.nnn\n    # g对象类似全局变量，在任何时候都能使用设置的值\n    g.name = request.args.get('name')   # 好像没效果，因为前端没有传来\n    print(g.name)",
        "detail": "上下文.app",
        "documentation": {}
    },
    {
        "label": "chongfu",
        "kind": 2,
        "importPath": "上下文.app",
        "description": "上下文.app",
        "peekOfCode": "def chongfu():\n    # 无论怎么请求，这里都会被预先触发\n    # g对象可以把当前请求需要的全局变量存储\n    # g.name 是任意属性，也可以写g.xxx g.abc g.nnn\n    # g对象类似全局变量，在任何时候都能使用设置的值\n    g.name = request.args.get('name')   # 好像没效果，因为前端没有传来\n    print(g.name)\n    print(\"欢迎你:\",request.remote_addr)   # 获取ip地址\n@app.route('/<name>')\ndef index(name):",
        "detail": "上下文.app",
        "documentation": {}
    },
    {
        "label": "index",
        "kind": 2,
        "importPath": "上下文.app",
        "description": "上下文.app",
        "peekOfCode": "def index(name):\n    print(\"成功访问首页\")\n    return \"首页\"\n# 上下文钩子\nif __name__ == \"__main__\":\n    app.run(host=\"0.0.0.0\", port=5000)",
        "detail": "上下文.app",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "上下文.app",
        "description": "上下文.app",
        "peekOfCode": "app = Flask(__name__)\n# 效果：可以把需要在shell里面测试的集成在一起，方便快速使用\n@app.shell_context_processor\ndef ceshi():\n    return dict(db=\"测试数据库\",user=\"admin\")\n# 请求狗子\n# before_first_requet\n@app.before_first_request\ndef first():\n    print(\"我只会执行一次\")",
        "detail": "上下文.app",
        "documentation": {}
    },
    {
        "label": "index",
        "kind": 2,
        "importPath": "各种项目架构.分区式架构.myapp.app.demo1.views",
        "description": "各种项目架构.分区式架构.myapp.app.demo1.views",
        "peekOfCode": "def index():\n    return render_template(\"index.html\")",
        "detail": "各种项目架构.分区式架构.myapp.app.demo1.views",
        "documentation": {}
    },
    {
        "label": "demo1_dp",
        "kind": 5,
        "importPath": "各种项目架构.分区式架构.myapp.app.demo1.views",
        "description": "各种项目架构.分区式架构.myapp.app.demo1.views",
        "peekOfCode": "demo1_dp = Blueprint(\"demo1\", __name__, template_folder=\"templates\")\n@demo1_dp.route(\"/login\")\ndef index():\n    return render_template(\"index.html\")",
        "detail": "各种项目架构.分区式架构.myapp.app.demo1.views",
        "documentation": {}
    },
    {
        "label": "register",
        "kind": 2,
        "importPath": "各种项目架构.分区式架构.myapp.app.users.views",
        "description": "各种项目架构.分区式架构.myapp.app.users.views",
        "peekOfCode": "def register():\n    return render_template('index.html')",
        "detail": "各种项目架构.分区式架构.myapp.app.users.views",
        "documentation": {}
    },
    {
        "label": "users_dp",
        "kind": 5,
        "importPath": "各种项目架构.分区式架构.myapp.app.users.views",
        "description": "各种项目架构.分区式架构.myapp.app.users.views",
        "peekOfCode": "users_dp = Blueprint(\"users\", __name__, template_folder='users/templates')\n@users_dp.route(\"/register\")\ndef register():\n    return render_template('index.html')",
        "detail": "各种项目架构.分区式架构.myapp.app.users.views",
        "documentation": {}
    },
    {
        "label": "Config",
        "kind": 6,
        "importPath": "各种项目架构.分区式架构.myapp.app.settings",
        "description": "各种项目架构.分区式架构.myapp.app.settings",
        "peekOfCode": "class Config(object):\n    DEBUG = True",
        "detail": "各种项目架构.分区式架构.myapp.app.settings",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "各种项目架构.分区式架构.myapp.main",
        "description": "各种项目架构.分区式架构.myapp.main",
        "peekOfCode": "app = create_app()\nif __name__ == \"__main__\":\n    app.run()",
        "detail": "各种项目架构.分区式架构.myapp.main",
        "documentation": {}
    },
    {
        "label": "index",
        "kind": 2,
        "importPath": "各种项目架构.功能式架构.myapp.app.blueprints.demo1.view",
        "description": "各种项目架构.功能式架构.myapp.app.blueprints.demo1.view",
        "peekOfCode": "def index():\n    # return \"demo1 ok\"\n    return render_template('demo1/index.html')   # 模板需要和蓝图同级目录",
        "detail": "各种项目架构.功能式架构.myapp.app.blueprints.demo1.view",
        "documentation": {}
    },
    {
        "label": "demo1_dp",
        "kind": 5,
        "importPath": "各种项目架构.功能式架构.myapp.app.blueprints.demo1.view",
        "description": "各种项目架构.功能式架构.myapp.app.blueprints.demo1.view",
        "peekOfCode": "demo1_dp = Blueprint(\"demo1\", __name__)\n# 视图\n@demo1_dp.route('/login')\ndef index():\n    # return \"demo1 ok\"\n    return render_template('demo1/index.html')   # 模板需要和蓝图同级目录",
        "detail": "各种项目架构.功能式架构.myapp.app.blueprints.demo1.view",
        "documentation": {}
    },
    {
        "label": "index",
        "kind": 2,
        "importPath": "各种项目架构.功能式架构.myapp.app.blueprints.goods.view",
        "description": "各种项目架构.功能式架构.myapp.app.blueprints.goods.view",
        "peekOfCode": "def index():\n    return \"goods ok\"",
        "detail": "各种项目架构.功能式架构.myapp.app.blueprints.goods.view",
        "documentation": {}
    },
    {
        "label": "goods_dp",
        "kind": 5,
        "importPath": "各种项目架构.功能式架构.myapp.app.blueprints.goods.view",
        "description": "各种项目架构.功能式架构.myapp.app.blueprints.goods.view",
        "peekOfCode": "goods_dp = Blueprint(\"goods\", __name__)\n@goods_dp.route(\"/login\")\ndef index():\n    return \"goods ok\"",
        "detail": "各种项目架构.功能式架构.myapp.app.blueprints.goods.view",
        "documentation": {}
    },
    {
        "label": "index",
        "kind": 2,
        "importPath": "各种项目架构.功能式架构.myapp.app.blueprints.users.view",
        "description": "各种项目架构.功能式架构.myapp.app.blueprints.users.view",
        "peekOfCode": "def index():\n    return \"users访问成功\"",
        "detail": "各种项目架构.功能式架构.myapp.app.blueprints.users.view",
        "documentation": {}
    },
    {
        "label": "users_dp",
        "kind": 5,
        "importPath": "各种项目架构.功能式架构.myapp.app.blueprints.users.view",
        "description": "各种项目架构.功能式架构.myapp.app.blueprints.users.view",
        "peekOfCode": "users_dp = Blueprint(\"users\", __name__)\n@users_dp.route(\"/login\")\ndef index():\n    return \"users访问成功\"",
        "detail": "各种项目架构.功能式架构.myapp.app.blueprints.users.view",
        "documentation": {}
    },
    {
        "label": "Config",
        "kind": 6,
        "importPath": "各种项目架构.功能式架构.myapp.app.settings",
        "description": "各种项目架构.功能式架构.myapp.app.settings",
        "peekOfCode": "class Config(object):\n    DEBUG = True",
        "detail": "各种项目架构.功能式架构.myapp.app.settings",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "各种项目架构.功能式架构.myapp.main",
        "description": "各种项目架构.功能式架构.myapp.main",
        "peekOfCode": "app = create_app()\nif __name__ == \"__main__\":\n    app.run()",
        "detail": "各种项目架构.功能式架构.myapp.main",
        "documentation": {}
    },
    {
        "label": "Config",
        "kind": 6,
        "importPath": "工厂模式.app.settings",
        "description": "工厂模式.app.settings",
        "peekOfCode": "class Config(object):\n    DEBUG = True\n# 读取配置方法\n# app.config.from_object(Config)",
        "detail": "工厂模式.app.settings",
        "documentation": {}
    },
    {
        "label": "index",
        "kind": 2,
        "importPath": "工厂模式.main",
        "description": "工厂模式.main",
        "peekOfCode": "def index():\n    return render_template('base.html')\nif __name__ == \"__main__\":\n    app.run()",
        "detail": "工厂模式.main",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "工厂模式.main",
        "description": "工厂模式.main",
        "peekOfCode": "app = create_app()    # 创建app\n@app.route(\"/\")\ndef index():\n    return render_template('base.html')\nif __name__ == \"__main__\":\n    app.run()",
        "detail": "工厂模式.main",
        "documentation": {}
    },
    {
        "label": "index",
        "kind": 2,
        "importPath": "数据库.app",
        "description": "数据库.app",
        "peekOfCode": "def index():\n    db.create_all()\n    return \"数据库章节访问成功\"\n@app.route(\"/insert\")\ndef insert():\n    \"\"\"插入数据\"\"\"\n    d1 = Demo(name=\"小明\")\n    d2 = Demo(name=\"小红\")\n    d3 = Demo(name=\"小东\")\n    db.session.add(d1)",
        "detail": "数据库.app",
        "documentation": {}
    },
    {
        "label": "insert",
        "kind": 2,
        "importPath": "数据库.app",
        "description": "数据库.app",
        "peekOfCode": "def insert():\n    \"\"\"插入数据\"\"\"\n    d1 = Demo(name=\"小明\")\n    d2 = Demo(name=\"小红\")\n    d3 = Demo(name=\"小东\")\n    db.session.add(d1)\n    db.session.add(d2)\n    db.session.add(d3)\n    db.session.commit()\n    return \"数据新增成功\"",
        "detail": "数据库.app",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "数据库.app",
        "description": "数据库.app",
        "peekOfCode": "app = Flask(__name__)\ndb.init_app(app)\n# 数据库驱动\napp.config['SQLALCHEMY_DATABASE_URI'] = 'mysql://root:agl001@127.0.0.1:3306/demo'\napp.config[\"SQLALCHEMY_TRACK_MODIFICATIONS\"] = False\n# 如果出现错误，多数是没有安装 mysqlclient pip命令安装一下即可\n@app.route(\"/\")\ndef index():\n    db.create_all()\n    return \"数据库章节访问成功\"",
        "detail": "数据库.app",
        "documentation": {}
    },
    {
        "label": "app.config['SQLALCHEMY_DATABASE_URI']",
        "kind": 5,
        "importPath": "数据库.app",
        "description": "数据库.app",
        "peekOfCode": "app.config['SQLALCHEMY_DATABASE_URI'] = 'mysql://root:agl001@127.0.0.1:3306/demo'\napp.config[\"SQLALCHEMY_TRACK_MODIFICATIONS\"] = False\n# 如果出现错误，多数是没有安装 mysqlclient pip命令安装一下即可\n@app.route(\"/\")\ndef index():\n    db.create_all()\n    return \"数据库章节访问成功\"\n@app.route(\"/insert\")\ndef insert():\n    \"\"\"插入数据\"\"\"",
        "detail": "数据库.app",
        "documentation": {}
    },
    {
        "label": "app.config[\"SQLALCHEMY_TRACK_MODIFICATIONS\"]",
        "kind": 5,
        "importPath": "数据库.app",
        "description": "数据库.app",
        "peekOfCode": "app.config[\"SQLALCHEMY_TRACK_MODIFICATIONS\"] = False\n# 如果出现错误，多数是没有安装 mysqlclient pip命令安装一下即可\n@app.route(\"/\")\ndef index():\n    db.create_all()\n    return \"数据库章节访问成功\"\n@app.route(\"/insert\")\ndef insert():\n    \"\"\"插入数据\"\"\"\n    d1 = Demo(name=\"小明\")",
        "detail": "数据库.app",
        "documentation": {}
    },
    {
        "label": "Demo",
        "kind": 6,
        "importPath": "数据库.models",
        "description": "数据库.models",
        "peekOfCode": "class Demo(db.Model):\n    __tablename__ = \"users\"\n    id = db.Column(db.Integer(), primary_key=True)\n    name = db.Column(db.String(32), default=\"None\")",
        "detail": "数据库.models",
        "documentation": {}
    },
    {
        "label": "db",
        "kind": 5,
        "importPath": "数据库.models",
        "description": "数据库.models",
        "peekOfCode": "db = SQLAlchemy()\n# 测试\nclass Demo(db.Model):\n    __tablename__ = \"users\"\n    id = db.Column(db.Integer(), primary_key=True)\n    name = db.Column(db.String(32), default=\"None\")",
        "detail": "数据库.models",
        "documentation": {}
    },
    {
        "label": "ceshi",
        "kind": 2,
        "importPath": "自定义命令.app",
        "description": "自定义命令.app",
        "peekOfCode": "def ceshi():\n    click.echo(\"自定义命令测试成功\")\n@app.cli.command()\ndef ls():\n    click.echo(\"检查IP地址\") \n    import os\n    os.system(\"ping www.baidu.com\")\nif __name__ == \"__main__\":\n    app.run()",
        "detail": "自定义命令.app",
        "documentation": {}
    },
    {
        "label": "ls",
        "kind": 2,
        "importPath": "自定义命令.app",
        "description": "自定义命令.app",
        "peekOfCode": "def ls():\n    click.echo(\"检查IP地址\") \n    import os\n    os.system(\"ping www.baidu.com\")\nif __name__ == \"__main__\":\n    app.run()",
        "detail": "自定义命令.app",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "自定义命令.app",
        "description": "自定义命令.app",
        "peekOfCode": "app = Flask(__name__)\n@app.cli.command()\ndef ceshi():\n    click.echo(\"自定义命令测试成功\")\n@app.cli.command()\ndef ls():\n    click.echo(\"检查IP地址\") \n    import os\n    os.system(\"ping www.baidu.com\")\nif __name__ == \"__main__\":",
        "detail": "自定义命令.app",
        "documentation": {}
    }
]